/*
https://msdn.microsoft.com/ru-ru/library/gg328457.aspx
*/

var productLineProductGUID;
var availablePackageCount;
var selectedPackageCount;

//andnov 27-07-2018 https://kb.transas.com/display/CBS/Product+Being+Offered+for+Order+Intake+reports 
//main function added to to the column of the view
function displayIconTooltip(rowData) {
    console.log(rowData);
    var str = JSON.parse(rowData);
    var coldata = str.new_name_Value;
    var productLineID = str.RowId.replace('{', '').replace('}', '');
    //var productLineProductGUID;
//getting product GUID of Product line with callback to retrieve data from async HTTP Request 
    getproductLineProductGUID(productLineID, returnproductLineProductGUID);
    console.log("TRA. productLineProductGUID: "+productLineProductGUID);

    //getting products associated with main product with   callback to retrieve data from async HTTP Request    
    productLineProductGUID = productLineProductGUID.replace('{', '').replace('}', '');
    getAvailablePackageCount(productLineProductGUID, returnAvailablePackageCount);
    console.log("TRA. availablePackageCount: " + availablePackageCount);

    //getting product packacges already selected for product Line associated with main product with   callback to retrieve data from async HTTP Request    
    getSelectedPackageCount(productLineID, returnSelectedPackageCount);
    console.log("TRA. selectedPackageCount: " + selectedPackageCount);

    var imgName = "";
    var tooltip = "";


if (availablePackageCount>0 && selectedPackageCount == 0 ){
            imgName = "tra_BoxedCheckboxOFF1_16.png";
            tooltip = "Choose at least one Package or Model you offer to Customer";
} else if (availablePackageCount == 0){
            imgName = "tra_BoxedCheckboxON1_16.png";
            tooltip = "No packages available for this Product Line";
}else if (selectedPackageCount !=0 ) {
            imgName = "tra_BoxedCheckboxON1_16.png";
            tooltip = "Packages selected";
} else {
            imgName = "";
            tooltip = "";
}


    var resultarray = [imgName, tooltip];
    return resultarray;
}

function getproductLineProductGUID (productLineID, callback) {

var req = new XMLHttpRequest();
req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v8.2/new_opportunityproductgroups(" + productLineID + ")?$select=_tra_productlineid_value", false);
req.setRequestHeader("OData-MaxVersion", "4.0");
req.setRequestHeader("OData-Version", "4.0");
req.setRequestHeader("Accept", "application/json");
req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
var returnValue;
req.onreadystatechange = function() {
    if (this.readyState === 4) {
        req.onreadystatechange = null;
        if (this.status === 200) {
            var result = JSON.parse(this.response);
            var _tra_productlineid_value = result["_tra_productlineid_value"];
            //var _tra_productlineid_value_formatted = result["_tra_productlineid_value@OData.Community.Display.V1.FormattedValue"];
            //var _tra_productlineid_value_lookuplogicalname = result["_tra_productlineid_value@Microsoft.Dynamics.CRM.lookuplogicalname"];
            returnValue = _tra_productlineid_value;
            //console.log(returnValue);
            callback(returnValue);
        } else {
            Xrm.Utility.alertDialog(this.statusText);
        }
        
    } 
};
req.send();
//return returnValue;
}

function getAvailablePackageCount (productLineProductGUID, callback){

var req = new XMLHttpRequest();
req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v8.2/productassociations?$select=_associatedproduct_value&$filter=_productid_value eq "+productLineProductGUID+"", false);
req.setRequestHeader("OData-MaxVersion", "4.0");
req.setRequestHeader("OData-Version", "4.0");
req.setRequestHeader("Accept", "application/json");
req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
req.onreadystatechange = function() {
    if (this.readyState === 4) {
        req.onreadystatechange = null;
        if (this.status === 200) {
            var results = JSON.parse(this.response);
            callback(results.value.length);
        } else {
            Xrm.Utility.alertDialog(this.statusText);
        }
    }
};
req.send();
}


function getSelectedPackageCount (productLineID, callback) {
    var req = new XMLHttpRequest();
req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v8.2/tra_productpackageitems?$select=tra_productpackageitemid&$filter=_tra_opportunityproductlineid_value eq "+productLineID+"", false);
req.setRequestHeader("OData-MaxVersion", "4.0");
req.setRequestHeader("OData-Version", "4.0");
req.setRequestHeader("Accept", "application/json");
req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
req.onreadystatechange = function() {
    if (this.readyState === 4) {
        req.onreadystatechange = null;
        if (this.status === 200) {
            var results = JSON.parse(this.response);
            callback(results.value.length);            
        } else {
            Xrm.Utility.alertDialog(this.statusText);
        }
    }
};
req.send();
}

//functions to return values from async requests
function returnproductLineProductGUID (valueid) {
productLineProductGUID = valueid;
}

function returnAvailablePackageCount (valueid) {
availablePackageCount =  valueid ; 
}

function returnSelectedPackageCount (valueid) {
selectedPackageCount =  valueid ; 
}

