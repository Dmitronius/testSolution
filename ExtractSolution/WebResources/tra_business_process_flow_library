//If the TRA namespace object is not defined, create it.
if (typeof (TRA) == "undefined") { TRA = {}; }
// Create Namespace container for functions in this library;
TRA.ProcessFlow = {};

TRA.ProcessFlow.disableProcessFields = function (stepField) {
    //debugger;
    //console.log (stepField);
    for (var i = 0; i < stepField.length; i++) {
        TRA.ProcessFlow._setDisabled(stepField[i]);
    }
}

TRA.ProcessFlow._setDisabled = function (fieldToDisable) {
    if (Xrm.Page.getControl(fieldToDisable) != undefined) {
        Xrm.Page.getControl(fieldToDisable).setDisabled(true);
        //console.log("TRA.Disabled: " + fieldToDisable);
    }
}

//andnov 13-07-2018 prohibit process stage change if no Product Lines for Offer selected
//adding onstagechange on formload
function addOnStageChangeRestrictions(executionContext) {
    let formContext = executionContext.getFormContext();
    let activeProcess = formContext.data.process.getActiveProcess();

    if (activeProcess) {
        checkIfNonCommercialProject(executionContext);
        formContext.getAttribute('new_projecttype').addOnChange(checkIfNonCommercialProject);
        formContext.getAttribute('crm1st_genericcode').addOnChange(checkIfNonCommercialProject);
    }

    checkBudget(true);//in order to check budgets when form loads
    Xrm.Page.getControl("BUDGETS").addOnLoad(checkBudget);//in order to check budgets when grid refreshes

    var userRoles = Xrm.Page.context.getUserRoles();
    var adminRole = false;
    for (var i = 0; i < userRoles.length; i++) {
        if (userRoles[i] == "90591179-f035-e711-8106-5065f38bd511") { //system admin role guid
            adminRole = true;
        }
    }
    if (adminRole === false) {
        Xrm.Page.data.process.addOnStageChange(stopPreviousStageButton); //to forbid moving back from ordered
    }

    notificationForOrderedStatuscode(); //to display notification

}

function checkIfNonCommercialProject(executionContext, config = "display") {
    let formContext = executionContext.getFormContext();
    let isCommercialProject = formContext.getAttribute('wdt_iscommercial').getValue();
    let notificationMessage = 'Opportunity of this \'Project Type\' and \'Generic Code\' cannot be progressed beyond \'Initial Negotiations\'.';
    let notificationMessageID = 'nonCommercialProject';
    let notificationTimeout = 10000;

    if (isCommercialProject == false && config == "display") {
        formContext.ui.setFormNotification(notificationMessage, 'WARNING', notificationMessageID);
        setTimeout(checkIfNonCommercialProject, notificationTimeout, executionContext, "hide");
        console.log(config);
    } else {
        formContext.ui.clearFormNotification(notificationMessageID);
        console.log(config);
    }
}


//getting active product lines of OPP and returning their number 
function getProductLines(ExecutionContextObj) {
    oppID = Xrm.Page.data.entity.getId().replace('{', '').replace('}', '');
    console.log(oppID);
    var req = new XMLHttpRequest();
    req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v8.2/new_opportunityproductgroups?$filter=_new_opportunityid_value eq " + oppID + " and  statecode eq 0", true);
    req.setRequestHeader("OData-MaxVersion", "4.0");
    req.setRequestHeader("OData-Version", "4.0");
    req.setRequestHeader("Accept", "application/json");
    req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
    var countProductLines = 0;
    req.onreadystatechange = function () {
        if (this.readyState === 4) {
            req.onreadystatechange = null;
            if (this.status === 200) {
                var results = JSON.parse(this.response);
                countProductLines = results.value.length;
                checkProductLinesCount(countProductLines, ExecutionContextObj);
            } else {
                console.log("TRA. getProductLines request failed with:" + this.statusText);
            }
        }
    };
    try {
        req.send();
    } catch (e) {
        console.log(e.message);
    }
}


//check count of Product Lines and display-hide notification and move step back - only for specified new_solution
function checkProductLinesCount(countProductLines, ExecutionContextObj) {
    try {
        Xrm.Page.getControl("header_process_tra_isproductlineadded").setDisabled(true);
        console.log(countProductLines);
        var solutionsToCheck = [1, 2, 4, 5]; //acd=4, fos=5, stc=2, shs=1
        var solutionOfOpportunity = Xrm.Page.getAttribute("new_solutions").getValue(); //get solution on opportunity
        if (countProductLines == 0 && solutionsToCheck.indexOf(solutionOfOpportunity) != -1) {
            Xrm.Page.ui.setFormNotification("Add Products Being Offered", "ERROR", "noproductline");
            console.log("NOproductline");
            Xrm.Page.getAttribute("tra_isproductlineadded").setValue(false);
        } else {
            console.log("YESproductline");
            Xrm.Page.ui.clearFormNotification("noproductline");
            Xrm.Page.getAttribute("tra_isproductlineadded").setValue(true);
        }
        if (solutionsToCheck.indexOf(solutionOfOpportunity) == -1) {
            Xrm.Page.getControl("header_process_tra_isproductlineadded").setVisible(false); //hide the step if solution dont require it
        }
    }
    catch (e) {
        console.error(e);
    }
}

//andnov 13-07-2018 function to block movement from ordered stage 
function stopPreviousStageButton(ExecutionContextObj) {
    var direction = ExecutionContextObj.getEventArgs().getDirection();
    console.log(direction);
    if (direction == "Previous") {
        var activeStage = ExecutionContextObj.getEventArgs().getStage().getName();
        var activeStageID = ExecutionContextObj.getEventArgs().getStage().getId();
        console.log(ExecutionContextObj.getEventArgs().getStage().getId());
        var stagesBeforeOrdered = ['c9f03c4b-f58e-457c-a995-e3b0776eb371', 'b53cac4d-6cb7-40ae-9701-61be52c30610', '7c5672d0-7bef-4775-bec6-1affc94472ef', '587b02ba-ed77-431b-97d8-3d5ef55891f6']; //IDs of stages before ordered
        //cause we can get in ExecutionContextObj only Active stage (after transition, not before) we should check if active stage is one of the pre-ordered stages
        if (stagesBeforeOrdered.indexOf(activeStageID) != -1) {
            console.error("was ordered");
            Xrm.Page.data.refresh(true).then(function () { Xrm.Page.data.process.moveNext(function () { Xrm.Utility.alertDialog("If you need to move back from Ordered Stage - please contact ServiceDesk"); }); }, null);
        } else {
            console.log("was not ordered");
        }
    }

}

//value for status reason = ordered - 20
//displaying notification
function notificationForOrderedStatuscode() {
    if (Xrm.Page.getAttribute("statuscode").getValue() == 20) {
        console.log(Xrm.Page.getAttribute("statuscode").getValue() == 20);
        Xrm.Page.ui.setFormNotification("If you need to move back from Ordered Stage - please contact ServiceDesk", "WARNING", "orderedstage");
    }
}


//andnov 16-08-2018 JIRAPM-24160 Vaidation of quantity of active budgets
//opportunity should have only one active budget
//adding checkbox on opp BPF in order to count and control amount of active budgets

//main function

function checkBudget(ExecutionContextObj) {
    oppID = Xrm.Page.data.entity.getId().replace('{', '').replace('}', '');
    console.log("TRA.checkBudget oppID: " + oppID);
    getActiveBudgetsCount(oppID, function (activeBudgetCount) {
        if (activeBudgetCount === 1) {
            Xrm.Page.getAttribute("tra_issingleactivebudget").setValue(true);
            Xrm.Page.ui.clearFormNotification("nosingleactivebudget");
            console.log("TRA.activeBudgetCount = " + activeBudgetCount + "TRA. tra_issingleactivebudget = Yes");
        } else if (activeBudgetCount === 0) {
            Xrm.Page.getAttribute("tra_issingleactivebudget").setValue(true);
            console.log("TRA.activeBudgetCount = " + activeBudgetCount + "TRA. tra_issingleactivebudget = Yes");
        } else {
            Xrm.Page.getAttribute("tra_issingleactivebudget").setValue(false);
            Xrm.Page.ui.setFormNotification("There must be only one active budget in Opportunity", "ERROR", "nosingleactivebudget");
            console.log("TRA.activeBudgetCount = " + activeBudgetCount + "TRA. tra_issingleactivebudget = No");
        }
    });
}

//web api function
function getActiveBudgetsCount(oppID, callback) {
    var req = new XMLHttpRequest();
    req.open("GET", Xrm.Page.context.getClientUrl() + "/api/data/v8.2/new_cashflows?$filter=_new_opportunityid_value eq " + oppID + " and  statecode eq 0", true);
    req.setRequestHeader("OData-MaxVersion", "4.0");
    req.setRequestHeader("OData-Version", "4.0");
    req.setRequestHeader("Accept", "application/json");
    req.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    req.setRequestHeader("Prefer", "odata.include-annotations=\"*\"");
    req.onreadystatechange = function () {
        if (this.readyState === 4) {
            req.onreadystatechange = null;
            if (this.status === 200) {
                var results = JSON.parse(this.response);
                console.log("TRA.activeBudgetCount = " + results.value.length);
                callback(results.value.length);

            } else {
                console.log("TRA. getActiveBudgetsCount request failed with:" + this.statusText);
            }
        }
    };
    req.send();
}